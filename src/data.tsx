const titles = [
  'Основная информация о JavaScript',
  'Консоль и отладка',
  'Переменные и типы данных JavaScript',
  'Операторы JavaScript',
  'Условный оператор if...else в JavaScript',
  'Циклы в JavaScript',
  'Функции в JavaScript',
  'ООП и Классы в JavaScript'
]

const texts = [
  `<span>JavaScript - мультипарадигменный язык программирования. Он поддерживает объектно-ориентированный, императивный и функциональный стили.<br>
В 1992 году началась разработка скриптового встраиваемого языка Cmm, который позже был переименован в ScriptEase.<br> В 1995 году Брендан Эйх получил задачу внедрить язык программирования в браузер Netscape.<br> Язык изначально назывался Mocha, затем LiveScript, и в конечном итоге получил свое современное имя – JavaScript.<br> Разработкой и стандартизацией JavaScript также участвовали Марк Андрессен и Билл Джой.<br> JavaScript не принадлежит какой-либо компании или организации, что отличает его от некоторых других языков программирования.<br> Стандартизированная версия языка JavaScript имеет название ECMAScript, описывается стандартом ECMA-262.<br> Первой версии спецификации соответствовал JavaScript версии 1.1<br> Последняя на сегодняшний день версия языка ECMAScript 6 вышла в 2015 году, с появлением которой язык обрел новые стандарты и возможности.<br>
JavaScript имеет преимущества и недостатки.<br> JavaScript хорошо оптимизирован для отображения веб-сайтов, легко интегрируется с версткой и сервером, обладает высокой скоростью работы и производительностью, предлагает большое количество инструментов, а также обладает относительной простотой изучения.<br> Однако у JavaScript также есть недостатки, такие как отсутствие возможности загрузки и чтения файлов, нестрогая типизация, что может быть неудобным при обнаружении ошибок, и некоторые проблемы с безопасностью из-за возможности внедрения вредоносного кода.<br> В целом, JavaScript является популярным языком программирования с хорошими перспективами развития, особенно в области разработки веб-приложений и сайтов.<br>
Семантика и синтаксис JavaScript:<br>
1. Все идентификаторы регистрозависимы. Если лексические значения названий переменных одинаковы но если буквы будут разные, то и переменные тоже разные. Например: «var car» и «var Car» и «var cAr» - 3 разные переменные.
<br>2. В названиях переменных можно использовать буквы, нижнее подчёркивание, символ доллара, арабские цифры. Названия переменных может содержать вышеуказанные символы. Например: «var $a», «var abc», «var _4»
<br>3. Названия переменных не могут начинаться с цифры. Например «var 100» выведит о синтаксической ошибке.
<br>4. Для оформления однострочных комментариев используются «//», многострочные и внутристрочные комментарии начинаются с «/*» и заканчиваются «*/».</span><br>`,
`<span><br>В JavaScript существуют методы для взаимодействия между пользователем и Hyper Text Markup Language (HTML) страницей.<br>
alert (принимает 1 аргумент)<br>
Эта функция показывает сообщение (1-ый аргумент) и ждёт, пока пользователь нажмёт кнопку «ОК». <br>
Например: <code>alert("Hello"); </code><br>
Эта функция вызывает модальное окно. Понятие модальное означает, что пользователь не может взаимодействовать с интерфейсом остальной части страницы, нажимать на другие кнопки и т.д. до тех пор, пока взаимодействует с окном. В данном случае – пока не будет нажата кнопка «OK».
<br><br>
prompt (принимает 2 аргумента)<br>
Эта функция показывает сообщение (1-ый аргумент), поле для ввода текста (2-ой аргумент. Ввод по умолчанию) и ждёт, пока пользователь нажмёт кнопку «ОК» или «Отмена».<br>
Если пользователь нажмёт «Отмена» (Esc), то prompt вернёт зачение  null.<br>
Но если же будет нажата кнопка «ОК», то prompt вернёт зачение из поля ввода.<br>
Например: <br><code>
let age = prompt('Сколько тебе лет?', 100); <br>
alert(\`Тебе \${age} лет!\`); // Тебе 100 лет! <br>
</code><br>

confirm (принимает 1 аргумент)<br>
Функция confirm отображает модальное окно с текстом вопроса (1-ый аргумент) и двумя кнопками: «ОК» и «Отмена».<br>
Результатом функции будет true, если нажата кнопка «ОК». В других случаях – false.<br>
Например: <br><code>
let isBoss = confirm("Ты здесь главный?");<br>
alert( isBoss ); // true, если нажата OK<br>
</code><br>
<br>
Также существует другой метод для получия информации — консоль.<br> Объект Console служит для доступа к средствам отладки браузера. Работа с ним отличается в разных браузерах, но большенство этих методов и свойств поддерживаются всеми браузерами.<br> Рассмотрим несколько функций объекта (методов экземпляра).<br>
log (принимает массив аргументов). Общий метод вывода информации.<br>
Пример: <br><code>
var someObject = { str: "Some text", id: 5 };<br>
console.log(someObject); // ({str:"Some text", id:5})<br>
</code><br>
<br>
info, warn и error (принимают массив аргументов). Как и log выводят информацию, но стилизовавают по-разному, и вы можете использовать фильтры, предоставляемые браузером.<br>
<br>
Для расчёта длительности определённых операций введена поддержка таймеров.<br>
time (принимает 1 аргумент). Для запуска таймера вызовите функцию time, при этом в качестве параметра передайте название таймера.<br>
timeLog (принимает 1 аргумент). Выводит в консоль текущее значение таймера, запущенного вызовом time.<br>
timeEnd (принимает 1 аргумент). Для остановки таймера и для получения прошедшего времени в миллисекундах вызовите, передав в качестве параметра имя таймера.<br>
Пример: <br><code>
console.time("answer time");<br>
alert("Нажмите для продолжения");<br>
console.timeLog("answer time"); // выведет время, необходимое пользователю для того, чтобы закрыть первое окно.<br>
alert("Делаем кучу другой работы...");<br>
console.timeEnd("answer time"); // выведет время, необходимое пользователю для того, чтобы закрыть второе окно.</code></span><br>`,
`<span><br>Переменная – это «именованное хранилище» для данных.<br> Мы можем использовать переменные для хранения товаров, посетителей и других данных. Для создания переменной в JavaScript необходимо использовать ключевые слова: let, var, const.<br>
Приведённый ниже код создаёт (другими словами, объявляет) переменную с именем «message»: <br><code>
let message;<br>
</code><br>
Теперь можно поместить в переменную данные (другими словами, определить переменную), используя оператор присваивания «=»: <br><code>
message = 'Hello'; // сохранить строку 'Hello' в переменной с именем message<br>
</code><br>
Строка сохраняется в области памяти, связанной с переменной. Мы можем получить к ней доступ, используя имя переменной: <br><code>
alert(message); // показывает содержимое переменной ('Hello')<br>
</code><br>
Для краткости можно совместить объявление переменной и запись данных в одну строку: <br><code>
let message = 'Hello!'; // определяем переменную и присваиваем ей значение<br>
</code><br>
В JavaScript мы также можем объявить несколько переменных в одной строке: <br><code>
let user = 'John', age = 25, message = 'Hello';<br>
</code><br>
В старых скриптах вы также можете найти другое ключевое слово: var вместо let: <br><code>
var message = 'Hello';<br>
</code><br>
В JavaScript есть константы. Чтобы объявить константную, то есть, неизменяемую переменную, используйте const вместо let: <br><code>
const myBirthday = '18.04.1982';<br>
</code><br>
Переменные, объявленные с помощью const, называются «константами». Их нельзя изменить. Попытка сделать это приведёт к ошибке: <br><code>
const myBirthday = '18.04.1982';<br>
myBirthday = '01.01.2001'; // ошибка, константу нельзя перезаписать!<br>
</code><br>
<br>
Переменная в JavaScript может содержать любые данные. Все используемые данные в JavaScript имеют определенный тип. В JavaScript имеется восемь типов данных:<br>
String: представляет строку. Пример: <br><code>
const user = "Tom"<br>
</code><br>
<br>
Number: представляет числовое значение. Пример: <br><code>
const x = 45<br>
</code><br>
<br>
BigInt: предназначен для представления очень больших целых чисел. Пример: <br><code>
const value = 2545n;<br>
</code><br>
<br>
Boolean: представляет логическое значение true или false. Пример: <br><code>
const isAlive = true;<br>
<br>
</code><br>
<br>
Undefined: представляет одно специальное значение - undefined и указывает, что значение не установлено. Пример: <br><code>
let email;<br>
console.log(email); // выведет undefined<br>
</code><br>
<br>
Null: представляет одно специальное значение - null и указывает на отсутствие значения. Пример: <br><code>
const email = null;<br>
</code><br>
<br>
Symbol: представляет уникальное значение, которое часто применяется для обращения к свойствам сложных объектов. Пример: <br><code>
const id = Symbol("id")<br>
</code><br>
<br>
Array: представляет массив элементов. Пример: <br><code>
const list = [1234, 'hello world!', true];<br>
</code><br>
<br>
Object: представляет комплексный объект. Пример: <br><code>
const user = {name: "Tom", age:24};<br>
</code><br>
<br>
Немного информации о взаимодействии с массивами и объектами.<br> Чтобы добавить новый элемент в  массив или объект необходимо поставить квадратные скобки и внутри значение. Что бы узнать длину списка можно написать: .length после названия переменной.<br>
<br>
<br>Первые восемь типов представляют примитивные типы данных. Последний тип - Object представляет сложный, комплексный тип данных, который состоит из значений примитивных типов или других объектов.<br>

<br>Оператор typeof
<br>С помощью оператора typeof можно получить тип переменной, что может быть полезно, когда в зависимости от типа переменной необходимо выполнить те или иные действия: <code>
<br>let id;  // тип undefined
<br>console.log(id);
<br>id = 45;  // тип number
<br>console.log(id);
<br>id = "45";  // string
<br>console.log(typeof id);
<br></code></span>`,
`<span><br>Многие операторы знакомы нам ещё со школы: сложение +, умножение *, вычитание - и так далее.<br>
Термины: «унарный», «бинарный», «операнд»<br>
Операнд – то, к чему применяется оператор.<br> Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2. Иногда их называют «аргументами» вместо «операндов».<br>
Унарным называется оператор, который применяется к одному операнду. Например, оператор унарный минус "-" меняет знак числа на противоположный: <br><code>
let x = 1;<br>
x = -x;<br>
alert( x ); // -1, применили унарный минус<br>
</code><br>
Бинарным называется оператор, который применяется к двум операндам. Тот же минус существует и в бинарной форме:<br> <code>
let x = 1, y = 3;<br>
alert( y - x ); // 2, бинарный минус вычитает значения<br>
</code><br>
Формально, в последних примерах мы говорим о двух разных операторах, использующих один символ: оператор отрицания (унарный оператор, который обращает знак) и оператор вычитания (бинарный оператор, который вычитает одно число из другого).<br>
Поддерживаются следующие математические операторы:<br>
Сложение +,<br>
Вычитание -,<br>
Умножение *,<br>
Деление /,<br>
Взятие остатка от деления %,<br>
Возведение в степень **.<br>
Сложение строк при помощи бинарного +<br>
Обычно при помощи плюса + складывают числа.<br>
Но если бинарный оператор + применить к строкам, то он их объединяет в одну:<br> <code>
let s = "моя" + "строка";<br>
alert(s); // моястрока<br>
</code><br>
Обратите внимание, если хотя бы один операнд является строкой, то второй будет также преобразован в строку.<br>
Например: <br><code>
alert( '1' + 2 ); // "12"<br>
alert( 2 + '1' ); // "21"<br>
</code><br>
Сложение и преобразование строк — это особенность бинарного плюса +. Другие арифметические операторы работают только с числами и всегда преобразуют операнды в числа.<br>
Например, вычитание и деление:<br> <code>
alert( 6 - '2' ); // 4, '2' приводится к числу<br>
alert( '6' / '2' ); // 3, оба операнда приводятся к числам<br>
</code><br>
<br>
Приведение к числу, унарный +<br>
Плюс + существует в двух формах: бинарной, которую мы использовали выше, и унарной.<br>
Унарный, то есть применённый к одному значению, плюс + ничего не делает с числами. Но если операнд не число, унарный плюс преобразует его в число. Например:<br><code>
let x = 1; // Не влияет на числа<br>
alert( +x ); // 1<br>
let y = -2;<br>
alert( +y ); // -2<br>
alert( +true ); // 1 Преобразует не числа в числа<br>
alert( +"" );   // 0<br>
</code><br>
<br>
Инкремент/декремент<br>
Одной из наиболее частых числовых операций является увеличение или уменьшение на единицу. Для этого существуют даже специальные операторы:<br>
Инкремент ++ увеличивает переменную на 1:<br> <code>
let counter = 2;<br>
counter++;        // работает как counter = counter + 1<br>
alert( counter ); // 3<br>
</code><br>
Декремент -- уменьшает переменную на 1: <br><code>
let counter = 2;<br>
counter--;        // работает как counter = counter - 1<br>
alert( counter ); // 1<br>
</code><br>
<br>
Побитовые операторы<br>
Эти операторы не являются чем-то специфичным для JavaScript, они поддерживаются в большинстве языков программирования.<br>
AND(и) ( & )<br>
OR(или) ( | )<br>
XOR(побитовое исключающее или) ( ^ )<br>
NOT(не) ( ~ )<br>
LEFT SHIFT(левый сдвиг) ( << )<br>
RIGHT SHIFT(правый сдвиг) ( >> )<br>
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями)( >>> )</span><br>`,
`<span><br>В программировании часто возникает ситуация, когда необходимо выбрать, какой блок кода выполнять, на основе каких-то данных. Эти данные используют для блока  условие, сами же условия в JavaScript бывают:<br>
>, =, < (математические условия)<br>
=== (условие индентичности)<br>
! (логическое не)<br>
<br>
Для принятия решений в программировании используют операторы сравнения и логические операторы. А для организации условных ветвлений, то есть выбора определенного блока кода, — условный оператор if...else. <br>
В JavaScript есть три формы оператора if...else:<br>
Оператор if.<br>
Оператор if...else.<br>
Оператор if...else if...else.<br>
Оператор if в JavaScript<br>
Давайте сначала договоримся, что инструкции — это команда или набор команд. То есть инструкции — просто кусок кода.<br>
Cинтаксис:<br> <code>
if (условие) {<br>
	инструкции;<br>
}<br>
</code><br>
Как это работает:<br>
1. Оператор if оценивает условие внутри круглых скобок ().<br>
2. Если условие — true, выполняются инструкции в теле if. <br>
3. Если условие — false, инструкции в теле if игнорируются.<br>
Примечание. Тело оператора if — код внутри фигурных скобок {} после if.<br>
Пример:<br> <code>
// проверяем, положительное ли число введено<br>
const number = prompt("Введите число ");<br>
// условие: число больше нуля?<br>
if (number > 0) {<br>
  // инструкция в теле оператора if<br>
  console.log("Число положительное.");<br>
}<br>
// инструкция после if<br>
console.log("Условные конструкции — это несложно.");<br>
</code><br>
Предположим, пользователь ввел 2. В этом случае условие number > 0 равно true, потому что 2 > 0. Значит, код внутри тела if выполняется.<br>
Вывод 1:<br> <code>
Введите число: 2<br>
Число положительное.<br>
Условные конструкции — это несложно.<br>
</code><br>
Теперь предположим, пользователь ввел -1. В этом случае условие number > 0 равно false. Следовательно, тело оператора if пропускается, выполняется код после оператора.<br>
Вывод 2:<br> <code>
Введите число: -1<br>
Условные конструкции — это несложно.<br>
</code><br>
Поскольку инструкция console.log("Условные конструкции — это несложно."); находится вне тела оператора if, она выполняется всегда, вне зависимости от условия if.<br>
Оператор if...else в JavaScript<br>
У оператора if есть необязательный пункт — else. <br>
Cинтаксис:<br> <code>
if (условие) {<br>
  // инструкции в теле if<br>
} else {<br>
  // инструкции в теле else<br>
}<br>
</code><br>
Как это работает:<br>
1. Оператор if...else также оценивает условие внутри скобок.<br>
2. Если условие — true,<br>
выполняются инструкции в теле if, а инструкции в теле else игнорируются.<br>
3. Если условие — false,<br>
инструкции в теле if игнорируются, но выполняются инструкции в теле else.<br>
Пример:<br> <code>
// определяет, какое введёно число: <br>
// положительное, отрицательное или ноль<br>
const number = prompt("Введите число: ");<br>
// проверяем, положительное число или нет<br>
if (number > 0) {<br>
  // инструкция в теле if <br>
  console.log("Это положительное число.");<br>
}<br>
// в противном случае — число отрицательно или ноль<br>
else {<br>
  // инструкция в теле else<br>
  console.log("Это отрицательное число или ноль.");<br>
}<br>
// инструкция после конструкции if...else<br>
console.log("Конструкция if...else — это несложно.");<br>
</code><br>
Предположим, пользователь ввел: 2. В этом случае условие (number > 0) — true. Значит, инструкции в теле if выполнятся, а инструкции в теле else — проигнорируются.<br>
Вывод1: <br><code>
Введите число: 2<br>
Это положительное число.<br>
Конструкция if...else — это несложно. <br>
</code><br>
Теперь предположим, что пользователь ввел: -1. В этом случае условие (number > 0) — false. Значит, инструкции в теле if игнорируются, а инструкции в теле else — выполняются.<br>
Вывод 2: <br><code>
Введите число: -1<br>
Это отрицательное число или ноль.<br>
Конструкция if...else — это несложно.<br>
</code></span><br>`,
`<span><br>В языке программирования JavaScript существует несколько способов сделать цикл. Одни из самых популярных - это while и for. Продемонстрируем их использование на практике.<br>
<br>
Цикл while<br>
Цикл while( условие ) выполняется только в том случае, если условие является истиной (как будто при проверке if( условие )). Очевидно, что при таком способе работы цикла его условие должно изменяться с каждой итерацией (с каждым повтором выполнения команды), иначе это будет бесконечный цикл. Продемонстрируем использование цикла на практике: <br><code>
var i = 1;<br>
while( i <= 3 ){<br>
  console.log(i);<br>
  i++;<br>
}<br>
</code><br>
<br>
Как только i станет равной 4, то произойдёт выход из цикла из-за того, что значение в скобках while( 4 <= 3 ) является ложью.<br>
Если бы в примере не было строчки i++;, то цикл выполнялся бы бесконечно, потому что i никогда бы не стала больше 3.<br>
<br>
Цикл for<br>
Теперь разберём цикл for( начальные параметры; условие завершения цикла; действие на каждой итерации ). Он имеет не одно, а сразу три условия. Попробуем переписать предыдущий пример, но используем цикл for: <br><code>
for( var i = 1; i <= 3; i++ ){<br>
  console.log(i);<br>
}<br>
</code><br>
Такой цикл занимает меньше строк, чем цикл с while, потому что включает в скобки for( ) задание начального значения переменной и действия, которое необходимо с ней сделать при новой итерации цикла. Результат выполнения такого цикла будет аналогичен результату из предыдущего примера.</span><br>`,
`<span><br>Функции в JavaScript выполняют важную роль. Они обеспечивают сокращение кода за счет вынесения его в отдельные места. Функции значительно облегчают построение программ, так как нам не надо копировать однотипный код множество раз, а можно просто воспользоваться одной общей функцией.<br>
<br>
В JavaScript функции создаются при помощи ключевого слова function. Каждая функция может иметь какие-либо параметры или же не иметь их вовсе. Функции способны что-либо возвращать в ходе выполнения кода, если это требуется.<br>
Создание функции<br>
<br>
Функция может не принимать никаких параметров и ничего не возвращать: <br><code>
function test() {<br>
  console.log("Вывод чего-либо в консоль");<br>
}<br>
</code><br>
Она просто пишет слово в консоль. Давайте разнообразим функцию и добавим параметр: <br><code>
function test(word) {<br>
  console.log(word);<br>
}<br>
</code><br>
Теперь функция принимает параметр, который будет отображен в консоли.<br>
Если функция должна что-либо вернуть, то прописываем ключевое слово return: <br><code>
function test(some_number) {<br>
  some_number *= 2;<br>
  return some_number;<br>
}<br>
</code><br>
Данная функция возвращает удвоенное число.</span>`,
`<br><span><br>С внедрением стандарта ECMAScript 6 в JavaScript появился новый способ определения объектов - с помощью классов. Класс представляет описание объекта, его состояния и поведения, а объект является конкретным воплощением или экземпляром класса. По сути синтаксис классов является альтернативной конструкцией, которая, как и функции-конструкторы, позволяет определить новый тип объектов.<br>
Определение класса<br>
Для определения класса используется ключевое слово class: <br><code>
class Person{ }<br>
</code><br>
После слова class идет название класса (в данном случае класс называется Person), и затем в фигурных скобках определяется тело класса.<br>
Класс - это общее представление некоторых сущностей или объектов. Конкретным воплощением этого представления, класса является объект. И после определения класса мы можем создать объекты класса с помощью конструктора: <br><code>
class Person{}<br>
const tom = new Person();<br>
const bob = new Person();<br>
</code><br>
Для создания объекта с помощью конструктора сначала ставится ключевое слово new. Затем идет вызов конструктора - по сути вызов функции по имени класса.<br>
Стоит отметить, что в отличие от функций, чтобы использовать класс, его надо сначала определить. Например, в следующем коде мы получим ошибку, так как пытаемся использовать класс до его определения: <br><code>
const tom = new Person();   // ! Ошибка - Uncaught ReferenceError: Cannot access 'Person' before initialization<br>
class Person{}<br>
</code><br>
Поля и свойства класса<br>
Для хранения данных или состояния объекта в классе используются поля и свойства.<br>
Итак, выше был определен класс Person, который представлял человека. У человека есть отличительные признаки, например, имя и возраст. Определим в классе Person поля для хранения этих данных: <br><code>
class Person{<br>
  name;<br>
  age;<br>
}<br>
const tom = new Person();<br>
tom.name = "Tom";<br>
tom.age = 37;<br>
console.log(tom.name);  // Tom<br>
console.log(tom.age);   // 37<br>
</code><br>
После создания объекта класса мы можем обратиться к этим полям. Для этого после имени объекта через точку указывается имя поля: <br><code>
tom.name = "Tom";       // установим значение поля<br>
console.log(tom.name);  // получим значение свойства<br>
</code><br>
При необходимости мы можем присвоить полям некоторые начальные значения: <br><code>
class Person{<br>
  name = "Unknown";<br>
  age= 18;<br>
}<br>
const tom = new Person();<br>
console.log(tom.name);  // Unknown<br>
tom.name = "Tom";<br>
console.log(tom.name);  // Tom<br>
</code><br>
Поведение класса и его методы<br>
Кроме хранения данных, которые определяют состояние объекта, класс может иметь методы, которые определяют поведение объекта - действия, которые выполняет объект.<br> Например, определим в классе Person пару методов (функций): <br><code>
class Person{<br>
  name;<br>
  age;<br>
  move(place){<br>
    console.log(\`Go to \${place}\`);<br>
  }<br>
  eat(){<br>
    console.log("Eat apples");<br>
  }<br>
}<br>
const tom = new Person();<br>
tom.move("Hospital");   // Go to Hospital<br>
tom.move("Cinema");     // Go to Cinema<br>
tom.eat();              // Eat apples<br>
</code><br>
Здесь определен метод move(), который представляет условное передвижение человека. В качестве параметра метод принимает место, к которому идет человек. Второй метод - eat() - представляет условный процесс питания.<br>
Обращение к полям и методам внутри класса. Слово this<br>
В случае необходимости использовании поля класса — можно перед именем свойства указать ключевое слово this, которое в данном случае указывает на текущий объект. Например, определим метод, который выводит информацию об объекте: <br><code>
class Person{<br>
  name;<br>
  age;<br>
  print(){<br>
    console.log(\`Name: \${this.name}  Age: \${this.age}\`);<br>
  }<br>
}<br>
const tom = new Person();<br>
tom.name = "Tom";<br>
tom.age = 37;<br>
tom.print();    // Name: Tom  Age: 37<br>
 <br>
const bob = new Person();<br>
bob.name = "Bob";<br>
bob.age = 41;<br>
bob.print();    // Name: Bob  Age: 41<br>
</code><br>
Определение конструктора<br>
Вызов конструктора по умолчанию, который есть в классах, фактически представляет вызов метода, который имеет то же название, что и класс, и возвращает объект этого класса. Но также мы можем определить в классах свои конструкторы. Конструктор определяется с помощью метода с именем constructor. По сути это обычный метод, который может принимать или не принимать (по умолчанию) параметры. Но как правило, цель конструктора - инициализация объекта некоторыми начальными данными: <br><code>
class Person{<br>
  name;<br>
  age;<br>
  constructor(pName, pAge){<br>
    this.name = pName;<br>
    this.age = pAge;<br>
  }<br>
  print(){<br><br>
    console.log(\`Name: \${this.name}  Age: \${this.age}\`);<br>
  }<br>
}<br>
const tom = new Person("Tom", 37);<br>
tom.print();    // Name: Tom  Age: 37<br>
const bob = new Person("Bob", 41); <br>
bob.print()     // Name: Bob  Age: 41<br>
</code><br>
Здесь конструктор принимает два параметра и передает их значения полям класса.</span>`
]



export default {titles,texts}
